
I2C_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dcc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000efc  08000efc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  4 .ARM          00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f0c  08000f14  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000000  08000f14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08000f14  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ba4  00000000  00000000  00010f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000801  00000000  00000000  00012ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000290  00000000  00000000  000132e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  00013578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000028e7  00000000  00000000  00013790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002506  00000000  00000000  00016077  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008a7d  00000000  00000000  0001857d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00020ffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000084c  00000000  00000000  00021078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ee4 	.word	0x08000ee4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ee4 	.word	0x08000ee4

08000170 <EEPROM_Init>:


#include "I2C_Slave_EEPROM.h"

void EEPROM_Init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	// Init I2C
	I2C_Device_CFG_t   I2C1_cfg ;

	I2C1_cfg.Device_mode = master ;
 8000176:	2300      	movs	r3, #0
 8000178:	f887 3020 	strb.w	r3, [r7, #32]
	I2C1_cfg.I2C_MOde = I2C_Mode_I2C_Mode;
 800017c:	2300      	movs	r3, #0
 800017e:	60bb      	str	r3, [r7, #8]
	I2C1_cfg.General_Call_Address_Detection = I2C_GC_Enable;
 8000180:	2340      	movs	r3, #64	; 0x40
 8000182:	617b      	str	r3, [r7, #20]
	I2C1_cfg.I2C_ACK_Control = I2C_ACK_Control_Enable ;
 8000184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000188:	60fb      	str	r3, [r7, #12]
	I2C1_cfg.I2C_CLK_Speed = I2C_CLK_Speed_SM_100K ;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <EEPROM_Init+0x40>)
 800018c:	603b      	str	r3, [r7, #0]
	I2C1_cfg.I2C_IRQ = I2C_IRQ_NONE ;
 800018e:	2300      	movs	r3, #0
 8000190:	613b      	str	r3, [r7, #16]
	I2C1_cfg.I2C_Stretch_Mode = I2C_Stretch_Mode_Enable;
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]

	MCAL_I2C_Init(I2C1, &I2C1_cfg) ;
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4806      	ldr	r0, [pc, #24]	; (80001b4 <EEPROM_Init+0x44>)
 800019c:	f000 f882 	bl	80002a4 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <EEPROM_Init+0x44>)
 80001a2:	f000 f97b 	bl	800049c <MCAL_I2C_GPIO_Set_Pins>

}
 80001a6:	bf00      	nop
 80001a8:	3728      	adds	r7, #40	; 0x28
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	000186a0 	.word	0x000186a0
 80001b4:	40005400 	.word	0x40005400

080001b8 <EEPROM_Write_Nbytes>:
void EEPROM_Write_Nbytes(uint32_t memory_address , uint8_t* data , uint8_t data_length)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b0c6      	sub	sp, #280	; 0x118
 80001bc:	af02      	add	r7, sp, #8
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	6018      	str	r0, [r3, #0]
 80001c4:	f107 0308 	add.w	r3, r7, #8
 80001c8:	6019      	str	r1, [r3, #0]
 80001ca:	1dfb      	adds	r3, r7, #7
 80001cc:	701a      	strb	r2, [r3, #0]
	uint8_t Buffer[250] , i ;
	Buffer[0] = (uint8_t)(memory_address >>8);
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	753b      	strb	r3, [r7, #20]
	Buffer[1] =(uint8_t) memory_address ;
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	757b      	strb	r3, [r7, #21]

	for (i=2 ; i<data_length+2 ; i++)
 80001e4:	2302      	movs	r3, #2
 80001e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80001ea:	e013      	b.n	8000214 <EEPROM_Write_Nbytes+0x5c>
	{
		Buffer[i] = data[i-2];
 80001ec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001f0:	3b02      	subs	r3, #2
 80001f2:	f107 0208 	add.w	r2, r7, #8
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001fe:	7812      	ldrb	r2, [r2, #0]
 8000200:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000204:	440b      	add	r3, r1
 8000206:	f803 2cfc 	strb.w	r2, [r3, #-252]
	for (i=2 ; i<data_length+2 ; i++)
 800020a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800020e:	3301      	adds	r3, #1
 8000210:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000214:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000218:	1dfb      	adds	r3, r7, #7
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3302      	adds	r3, #2
 800021e:	429a      	cmp	r2, r3
 8000220:	dbe4      	blt.n	80001ec <EEPROM_Write_Nbytes+0x34>
	}

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, Buffer, data_length+2, with_Stop, Start);
 8000222:	1dfb      	adds	r3, r7, #7
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	3302      	adds	r3, #2
 8000228:	4619      	mov	r1, r3
 800022a:	f107 0214 	add.w	r2, r7, #20
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2300      	movs	r3, #0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	212a      	movs	r1, #42	; 0x2a
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <EEPROM_Write_Nbytes+0x94>)
 800023c:	f000 f976 	bl	800052c <MCAL_I2C_Master_Tx>
}
 8000240:	bf00      	nop
 8000242:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <EEPROM_Read_bytes>:
void EEPROM_Read_bytes(uint32_t memory_address , uint8_t* dataOut , uint8_t data_length)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	4613      	mov	r3, r2
 800025c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2] ;
	Buffer[0] = (uint8_t)(memory_address >>8);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b2db      	uxtb	r3, r3
 8000264:	753b      	strb	r3, [r7, #20]
	Buffer[1] = (uint8_t) memory_address ;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, Buffer, 2, without_Stop, Start);
 800026c:	f107 0214 	add.w	r2, r7, #20
 8000270:	2300      	movs	r3, #0
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2301      	movs	r3, #1
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2302      	movs	r3, #2
 800027a:	212a      	movs	r1, #42	; 0x2a
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <EEPROM_Read_bytes+0x50>)
 800027e:	f000 f955 	bl	800052c <MCAL_I2C_Master_Tx>
	MCAL_I2C_Master_Rx(I2C1, EEPROM_Slave_Address, dataOut, data_length, with_Stop, Reapeted_Start);
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2300      	movs	r3, #0
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	212a      	movs	r1, #42	; 0x2a
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <EEPROM_Read_bytes+0x50>)
 8000294:	f000 f998 	bl	80005c8 <MCAL_I2C_Master_Rx>
}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40005400 	.word	0x40005400

080002a4 <MCAL_I2C_Init>:
 *         		 the configuration information for the specified I2C.
 * @retval 		-none
 * Note			-none
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx , I2C_Device_CFG_t* I2C_Init_Cfg)
{
 80002a4:	b5b0      	push	{r4, r5, r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	// Enable RCC Clock
	if(I2Cx == I2C1)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a72      	ldr	r2, [pc, #456]	; (800047c <MCAL_I2C_Init+0x1d8>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d112      	bne.n	80002dc <MCAL_I2C_Init+0x38>
	{
		RCC_I2C1_CLK_EN();
 80002b6:	4b72      	ldr	r3, [pc, #456]	; (8000480 <MCAL_I2C_Init+0x1dc>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	4a71      	ldr	r2, [pc, #452]	; (8000480 <MCAL_I2C_Init+0x1dc>)
 80002bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002c0:	61d3      	str	r3, [r2, #28]
		G_I2C_Cfg[I2C1_index] = *I2C_Init_Cfg ;
 80002c2:	4a70      	ldr	r2, [pc, #448]	; (8000484 <MCAL_I2C_Init+0x1e0>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	4614      	mov	r4, r2
 80002c8:	461d      	mov	r5, r3
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80002da:	e016      	b.n	800030a <MCAL_I2C_Init+0x66>
	}
	else if (I2Cx == I2C2)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a6a      	ldr	r2, [pc, #424]	; (8000488 <MCAL_I2C_Init+0x1e4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d112      	bne.n	800030a <MCAL_I2C_Init+0x66>
	{
		RCC_I2C2_CLK_EN();
 80002e4:	4b66      	ldr	r3, [pc, #408]	; (8000480 <MCAL_I2C_Init+0x1dc>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	4a65      	ldr	r2, [pc, #404]	; (8000480 <MCAL_I2C_Init+0x1dc>)
 80002ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ee:	61d3      	str	r3, [r2, #28]
		G_I2C_Cfg[I2C2_index] = *I2C_Init_Cfg ;
 80002f0:	4b64      	ldr	r3, [pc, #400]	; (8000484 <MCAL_I2C_Init+0x1e0>)
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80002f8:	4615      	mov	r5, r2
 80002fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000306:	e884 0003 	stmia.w	r4, {r0, r1}
	}

	// Disable The I2C Peripheral I2C_CR1 Bit 0 PE: Peripheral enable
	I2Cx->I2C_CR1 &= ~(I2C_CR1_PE);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f023 0201 	bic.w	r2, r3, #1
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]

	// check the mode of I2C Bus
	if(I2C_Init_Cfg->I2C_MOde == I2C_Mode_I2C_Mode)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d177      	bne.n	800040e <MCAL_I2C_Init+0x16a>
	{
		/********************* INIT Timing **************************/
		// Program the peripheral input clock in I2C_CR2 Register Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		I2Cx->I2C_CR2 &= ~(I2C_CR2_FREQ_Msk);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	605a      	str	r2, [r3, #4]
		// Get the Pclk1
		I2Cx->I2C_CR2 |= ((MCAL_RCC_GET_PCLK1_Freq()/1000000) & 0x001F);
 800032a:	f000 fc8d 	bl	8000c48 <MCAL_RCC_GET_PCLK1_Freq>
 800032e:	4602      	mov	r2, r0
 8000330:	4b56      	ldr	r3, [pc, #344]	; (800048c <MCAL_I2C_Init+0x1e8>)
 8000332:	fba3 2302 	umull	r2, r3, r3, r2
 8000336:	0c9b      	lsrs	r3, r3, #18
 8000338:	f003 021f 	and.w	r2, r3, #31
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	431a      	orrs	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]

		// Configure the clock control registers

		/* Configure the Speed in standard Mode */
		if((I2C_Init_Cfg->I2C_CLK_Speed == I2C_CLK_Speed_SM_100K)||(I2C_Init_Cfg->I2C_CLK_Speed == I2C_CLK_Speed_SM_50K))
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a51      	ldr	r2, [pc, #324]	; (8000490 <MCAL_I2C_Init+0x1ec>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d005      	beq.n	800035c <MCAL_I2C_Init+0xb8>
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000358:	4293      	cmp	r3, r2
 800035a:	d127      	bne.n	80003ac <MCAL_I2C_Init+0x108>
		{
			 // Configure standard Mode
			I2Cx->I2C_CCR &= ~(1<<15) ;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	61da      	str	r2, [r3, #28]

			/* calculate the Speed in standard Mode */
			// Tclk/2 = CCR * Tpclk1
			// CCR = (Tclk / 2* Tpclk1)
			// CCR =( Fpclk1 / 2* Fclk)
			I2Cx->I2C_CCR |= (MCAL_RCC_GET_PCLK1_Freq() / (I2C_Init_Cfg->I2C_CLK_Speed <<1));
 8000368:	f000 fc6e 	bl	8000c48 <MCAL_RCC_GET_PCLK1_Freq>
 800036c:	4602      	mov	r2, r0
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	fbb2 f2f3 	udiv	r2, r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	69db      	ldr	r3, [r3, #28]
 800037c:	431a      	orrs	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	61da      	str	r2, [r3, #28]
			/* Configure I2C Rise Time  TRISE register (I2C_TRISE) */
//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
//			therefore the TRISE[5:0] bits must be programmed with 09h.
//			(1000 ns / 125 ns = 8 + 1)
			I2Cx->I2C_TRISE = (I2Cx->I2C_TRISE & (~(0x001F)));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6a1b      	ldr	r3, [r3, #32]
 8000386:	f023 021f 	bic.w	r2, r3, #31
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	621a      	str	r2, [r3, #32]
			I2Cx->I2C_TRISE |= (((MCAL_RCC_GET_PCLK1_Freq()/1000000)+1) & 0x001F) ;
 800038e:	f000 fc5b 	bl	8000c48 <MCAL_RCC_GET_PCLK1_Freq>
 8000392:	4602      	mov	r2, r0
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <MCAL_I2C_Init+0x1e8>)
 8000396:	fba3 2302 	umull	r2, r3, r3, r2
 800039a:	0c9b      	lsrs	r3, r3, #18
 800039c:	3301      	adds	r3, #1
 800039e:	f003 021f 	and.w	r2, r3, #31
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6a1b      	ldr	r3, [r3, #32]
 80003a6:	431a      	orrs	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	621a      	str	r2, [r3, #32]
			// Fast Mode Not supported yet
		}

		/* Configure I2C_CR1 Register */

		I2Cx->I2C_CR1 |= ((I2C_Init_Cfg->General_Call_Address_Detection) | (I2C_Init_Cfg->I2C_ACK_Control) | (I2C_Init_Cfg->I2C_Stretch_Mode) | (I2C_Init_Cfg->I2C_MOde));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	6959      	ldr	r1, [r3, #20]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4319      	orrs	r1, r3
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4319      	orrs	r1, r3
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	430b      	orrs	r3, r1
 80003c6:	431a      	orrs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]

		/* Configure I2C OAR1 & OAR2 Registers */

		if(I2C_Init_Cfg->I2C_Slave_Adress.Enable_Dual_Address == 1)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	8b1b      	ldrh	r3, [r3, #24]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10d      	bne.n	80003f0 <MCAL_I2C_Init+0x14c>
		{
			I2Cx->I2C_OAR2 |= I2C_OAR2_ENDUAL ;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f043 0201 	orr.w	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	60da      	str	r2, [r3, #12]
			I2Cx->I2C_OAR2 |= ((I2C_Init_Cfg->I2C_Slave_Adress.Secondary_Slave_Address)<<I2C_OAR2_ADD2_Pos) ;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	8b92      	ldrh	r2, [r2, #28]
 80003e8:	0052      	lsls	r2, r2, #1
 80003ea:	431a      	orrs	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
		}

		I2Cx->I2C_OAR2 |= ((I2C_Init_Cfg->I2C_Slave_Adress.Primary_Slave_Address)<<1) ;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	8b52      	ldrh	r2, [r2, #26]
 80003f8:	0052      	lsls	r2, r2, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	60da      	str	r2, [r3, #12]

		I2Cx->I2C_OAR2 |= I2C_Init_Cfg->I2C_Slave_Adress.I2C_Slave_Addressing_mode ;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	8bd2      	ldrh	r2, [r2, #30]
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60da      	str	r2, [r3, #12]
		// SMBus Not Supported
	}


	/* interrupt Enable (Slave Mode) */
	if(I2C_Init_Cfg->I2C_IRQ != I2C_IRQ_NONE)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d027      	beq.n	8000466 <MCAL_I2C_Init+0x1c2>
	{
		I2Cx->I2C_CR2 |= I2C_Init_Cfg->I2C_IRQ ;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	431a      	orrs	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	605a      	str	r2, [r3, #4]

		// Enable NVIC
		if(I2Cx == I2C1)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MCAL_I2C_Init+0x1d8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d10c      	bne.n	8000446 <MCAL_I2C_Init+0x1a2>
		{
			NVIC_IRQ31_I2C1_EV_ENABLE;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MCAL_I2C_Init+0x1f0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a18      	ldr	r2, [pc, #96]	; (8000494 <MCAL_I2C_Init+0x1f0>)
 8000432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000436:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_ENABLE;
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	e00f      	b.n	8000466 <MCAL_I2C_Init+0x1c2>
		}
		else if (I2Cx == I2C2)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <MCAL_I2C_Init+0x1e4>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d10b      	bne.n	8000466 <MCAL_I2C_Init+0x1c2>
		{
			NVIC_IRQ33_I2C2_EV_ENABLE;
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 8000454:	f043 0302 	orr.w	r3, r3, #2
 8000458:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_ENABLE;
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <MCAL_I2C_Init+0x1f4>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6013      	str	r3, [r2, #0]
		}
	}
	// Enable The I2C Peripheral I2C_CR1 Bit 0 PE: Peripheral enable
	I2Cx->I2C_CR1 |= (I2C_CR1_PE);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f043 0201 	orr.w	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	601a      	str	r2, [r3, #0]

}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bdb0      	pop	{r4, r5, r7, pc}
 800047a:	bf00      	nop
 800047c:	40005400 	.word	0x40005400
 8000480:	40021000 	.word	0x40021000
 8000484:	2000001c 	.word	0x2000001c
 8000488:	40005800 	.word	0x40005800
 800048c:	431bde83 	.word	0x431bde83
 8000490:	000186a0 	.word	0x000186a0
 8000494:	e000e100 	.word	0xe000e100
 8000498:	e000e104 	.word	0xe000e104

0800049c <MCAL_I2C_GPIO_Set_Pins>:
 * @param [in] 		-I2Cx: where x can be (1 or 2 depending on i2c used) to select the I2C peripheral
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_I2C_Init()
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pin_Cfg ;
	if(I2Cx == I2C1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d118      	bne.n	80004de <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6 : I2C1_SCL  >> Alternate function open drain
		// PB7 : I2C1_SDA  >> Alternate function open drain

		Pin_Cfg.GPIO_PinNumber 	  = GPIO_PIN_6 ;
 80004ac:	2306      	movs	r3, #6
 80004ae:	733b      	strb	r3, [r7, #12]
		Pin_Cfg.GPIO_Mode     	  = GPIO_MODE_OUTPUT_AF_OD ;
 80004b0:	2307      	movs	r3, #7
 80004b2:	737b      	strb	r3, [r7, #13]
		Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	4819      	ldr	r0, [pc, #100]	; (8000524 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80004c0:	f000 fbf4 	bl	8000cac <MCAL_GPIO_Init>

		Pin_Cfg.GPIO_PinNumber 	  = GPIO_PIN_7 ;
 80004c4:	2307      	movs	r3, #7
 80004c6:	733b      	strb	r3, [r7, #12]
		Pin_Cfg.GPIO_Mode     	  = GPIO_MODE_OUTPUT_AF_OD ;
 80004c8:	2307      	movs	r3, #7
 80004ca:	737b      	strb	r3, [r7, #13]
		Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004cc:	2301      	movs	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	4619      	mov	r1, r3
 80004d6:	4813      	ldr	r0, [pc, #76]	; (8000524 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80004d8:	f000 fbe8 	bl	8000cac <MCAL_GPIO_Init>
		Pin_Cfg.GPIO_Mode     	  = GPIO_MODE_OUTPUT_AF_OD ;
		Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
		MCAL_GPIO_Init(GPIOB, &Pin_Cfg);

	}
}
 80004dc:	e01b      	b.n	8000516 <MCAL_I2C_GPIO_Set_Pins+0x7a>
	else 	if(I2Cx == I2C2)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d117      	bne.n	8000516 <MCAL_I2C_GPIO_Set_Pins+0x7a>
		Pin_Cfg.GPIO_PinNumber 	  = GPIO_PIN_10 ;
 80004e6:	230a      	movs	r3, #10
 80004e8:	733b      	strb	r3, [r7, #12]
		Pin_Cfg.GPIO_Mode     	  = GPIO_MODE_OUTPUT_AF_OD ;
 80004ea:	2307      	movs	r3, #7
 80004ec:	737b      	strb	r3, [r7, #13]
		Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	4619      	mov	r1, r3
 80004f8:	480a      	ldr	r0, [pc, #40]	; (8000524 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80004fa:	f000 fbd7 	bl	8000cac <MCAL_GPIO_Init>
		Pin_Cfg.GPIO_PinNumber 	  = GPIO_PIN_11 ;
 80004fe:	230b      	movs	r3, #11
 8000500:	733b      	strb	r3, [r7, #12]
		Pin_Cfg.GPIO_Mode     	  = GPIO_MODE_OUTPUT_AF_OD ;
 8000502:	2307      	movs	r3, #7
 8000504:	737b      	strb	r3, [r7, #13]
		Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000506:	2301      	movs	r3, #1
 8000508:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000512:	f000 fbcb 	bl	8000cac <MCAL_GPIO_Init>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40005400 	.word	0x40005400
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40005800 	.word	0x40005800

0800052c <MCAL_I2C_Master_Tx>:
 * @param [in]  -start: Specifies if device using start codition first time or reapeted .
 * @retval 		-none
 * Note			-none
 */
void MCAL_I2C_Master_Tx(I2C_TypeDef* I2Cx , uint16_t Slave_address , uint8_t* data , uint32_t data_length , Stop_Condition_t stop , Start_Condition_t start)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	607a      	str	r2, [r7, #4]
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	460b      	mov	r3, r1
 800053a:	817b      	strh	r3, [r7, #10]
	/* Set the start bit in I2C_CR1 Register to generate start Condition */
	I2C_Generate_Start(I2Cx, Enable, start);
 800053c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000540:	461a      	mov	r2, r3
 8000542:	2101      	movs	r1, #1
 8000544:	68f8      	ldr	r0, [r7, #12]
 8000546:	f000 f8b3 	bl	80006b0 <I2C_Generate_Start>

	/* Check if start Condition is generated or not .
	 * SB=1 , cleared by reading SR1 register followed by writing DR register with Address .
	 * */
	while(!I2C_Get_Flag_Status(I2Cx, I2C_Flag_SB));
 800054a:	bf00      	nop
 800054c:	2101      	movs	r1, #1
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 f90c 	bl	800076c <I2C_Get_Flag_Status>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f8      	beq.n	800054c <MCAL_I2C_Master_Tx+0x20>

	/* Send Slave Address */
	I2C_Send_Address(I2Cx, Slave_address, I2C_Transmitter_mode);
 800055a:	897b      	ldrh	r3, [r7, #10]
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f000 f95d 	bl	8000820 <I2C_Send_Address>

	/* wait till the address has been sent
	 * ADDR=1, cleared by reading SR1 register followed by reading SR2.
	 */
	while(!(I2C_Get_Flag_Status(I2Cx ,I2C_Flag_ADDR)));
 8000566:	bf00      	nop
 8000568:	2102      	movs	r1, #2
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f000 f8fe 	bl	800076c <I2C_Get_Flag_Status>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f8      	beq.n	8000568 <MCAL_I2C_Master_Tx+0x3c>

	/* Check Event that Master transmite byte
	 * TRA , MSL , BUSY , TXE
	 */
	I2C_Get_Event_Status(I2Cx , I2C_Event_Master_Byte_Transmitting);
 8000576:	2100      	movs	r1, #0
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 f91e 	bl	80007ba <I2C_Get_Event_Status>

	/* Send Data */
	uint32_t i ;
	for(i=0 ; i<data_length ; i++)
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	e011      	b.n	80005a8 <MCAL_I2C_Master_Tx+0x7c>
	{
		/* Write Data in DR register */
		I2Cx->I2C_DR = data[i];
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	611a      	str	r2, [r3, #16]

		/*When the acknowledge pulse is received, the TxE bit is set by hardware
		 * TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
		 */
		while(!I2C_Get_Flag_Status(I2Cx, I2C_Flag_TxE));
 8000592:	bf00      	nop
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f000 f8e8 	bl	800076c <I2C_Get_Flag_Status>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f8      	beq.n	8000594 <MCAL_I2C_Master_Tx+0x68>
	for(i=0 ; i<data_length ; i++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3e9      	bcc.n	8000584 <MCAL_I2C_Master_Tx+0x58>
	}

	/* Stop Condition */
	if(stop == with_Stop)
 80005b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <MCAL_I2C_Master_Tx+0x94>
	{
		/* Generate Stop Condition*/
		I2C_Generate_Stop(I2Cx, Enable);
 80005b8:	2101      	movs	r1, #1
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f000 f8a0 	bl	8000700 <I2C_Generate_Stop>
	}
}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MCAL_I2C_Master_Rx>:
 * @param [in]  -start: Specifies if device using start codition first time or reapeted .
 * @retval 		-none
 * Note			-none
 */
void MCAL_I2C_Master_Rx(I2C_TypeDef* I2Cx , uint16_t Slave_address , uint8_t* data , uint32_t data_length , Stop_Condition_t stop , Start_Condition_t start)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	460b      	mov	r3, r1
 80005d6:	817b      	strh	r3, [r7, #10]
	/* Set the start bit in I2C_CR1 Register to generate start Condition */
	I2C_Generate_Start(I2Cx, Enable, start);
 80005d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005dc:	461a      	mov	r2, r3
 80005de:	2101      	movs	r1, #1
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f865 	bl	80006b0 <I2C_Generate_Start>

	/* Check if start Condition is generated or not .
	 * SB=1 , cleared by reading SR1 register followed by writing DR register with Address .
	 * */
	while(!I2C_Get_Flag_Status(I2Cx, I2C_Flag_SB));
 80005e6:	bf00      	nop
 80005e8:	2101      	movs	r1, #1
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f000 f8be 	bl	800076c <I2C_Get_Flag_Status>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <MCAL_I2C_Master_Rx+0x20>

	/* Send Slave Address */
	I2C_Send_Address(I2Cx, Slave_address, I2C_Receiver_mode);
 80005f6:	897b      	ldrh	r3, [r7, #10]
 80005f8:	2201      	movs	r2, #1
 80005fa:	4619      	mov	r1, r3
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f90f 	bl	8000820 <I2C_Send_Address>

	/* wait till the address has been sent
	 * ADDR=1, cleared by reading SR1 register followed by reading SR2.
	 */
	while(!(I2C_Get_Flag_Status(I2Cx ,I2C_Flag_ADDR)));
 8000602:	bf00      	nop
 8000604:	2102      	movs	r1, #2
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f8b0 	bl	800076c <I2C_Get_Flag_Status>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f8      	beq.n	8000604 <MCAL_I2C_Master_Rx+0x3c>

	/*Enable ACK*/
	I2C_ACK_Control(I2Cx, Enable);
 8000612:	2101      	movs	r1, #1
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f000 f88e 	bl	8000736 <I2C_ACK_Control>

	if(data_length)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d01c      	beq.n	800065a <MCAL_I2C_Master_Rx+0x92>
	{
		uint32_t i ;
		for(i=0 ; i < data_length ; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e011      	b.n	800064a <MCAL_I2C_Master_Rx+0x82>
//			sequence:
//			1. An acknowledge pulse if the ACK bit is set
//			2. The RxNE bit is set

			/* Wait RXNE Flag to Set */
			while(!(I2C_Get_Flag_Status(I2Cx, I2C_Flag_RxNE)));
 8000626:	bf00      	nop
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 f89e 	bl	800076c <I2C_Get_Flag_Status>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f8      	beq.n	8000628 <MCAL_I2C_Master_Rx+0x60>

			data[i] = I2Cx->I2C_DR ;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6919      	ldr	r1, [r3, #16]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	b2ca      	uxtb	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
		for(i=0 ; i < data_length ; i++)
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e9      	bcc.n	8000626 <MCAL_I2C_Master_Rx+0x5e>
		}

//		To generate the nonacknowledge pulse after the last received data byte, the ACK bit
//		must be cleared just after reading the second last data byte (after second last RxNE event)
		I2C_ACK_Control(I2Cx, Disable);
 8000652:	2100      	movs	r1, #0
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f86e 	bl	8000736 <I2C_ACK_Control>
	}


	/* Stop Condition */
	if(stop == with_Stop)
 800065a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d103      	bne.n	800066a <MCAL_I2C_Master_Rx+0xa2>
	{
		/* Generate Stop Condition*/
		I2C_Generate_Stop(I2Cx, Enable);
 8000662:	2101      	movs	r1, #1
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f000 f84b 	bl	8000700 <I2C_Generate_Stop>
	}

	/* Return the ACK To the Global Configuration */
	uint8_t index = (I2Cx == I2C1)? 0 : 1 ;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <MCAL_I2C_Master_Rx+0xe0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	74fb      	strb	r3, [r7, #19]
	if(G_I2C_Cfg[index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 800067a:	7cfa      	ldrb	r2, [r7, #19]
 800067c:	490b      	ldr	r1, [pc, #44]	; (80006ac <MCAL_I2C_Master_Rx+0xe4>)
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	330c      	adds	r3, #12
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000690:	d105      	bne.n	800069e <MCAL_I2C_Master_Rx+0xd6>
	{
		// Enable ACK Control
		I2Cx->I2C_CR1 |= I2C_CR1_ACK ;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	601a      	str	r2, [r3, #0]
	}

}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40005400 	.word	0x40005400
 80006ac:	2000001c 	.word	0x2000001c

080006b0 <I2C_Generate_Start>:
}
/*************************
 *	Generic APIS
 *************************/
void I2C_Generate_Start(I2C_TypeDef* I2Cx , fanctional_State_t S_state  , Start_Condition_t start )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	4613      	mov	r3, r2
 80006be:	70bb      	strb	r3, [r7, #2]
	if(start != Reapeted_Start)
 80006c0:	78bb      	ldrb	r3, [r7, #2]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d008      	beq.n	80006d8 <I2C_Generate_Start+0x28>
		// wait if Bus is Busy
		while(I2C_Get_Flag_Status(I2Cx , I2C_Flag_Busy));
 80006c6:	bf00      	nop
 80006c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f84d 	bl	800076c <I2C_Get_Flag_Status>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f7      	bne.n	80006c8 <I2C_Generate_Start+0x18>
	//	0: No Start generation
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free
	if(S_state != Disable)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <I2C_Generate_Start+0x3c>
	{
		// generate the start condition
		I2Cx->I2C_CR1 |= I2C_CR1_START ;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
	{
		// Disable the start condition generation
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
	}

}
 80006ea:	e005      	b.n	80006f8 <I2C_Generate_Start+0x48>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <I2C_Generate_Stop>:

void I2C_Generate_Stop(I2C_TypeDef* I2Cx , fanctional_State_t P_state)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	if(P_state != Disable)
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <I2C_Generate_Stop+0x20>
	{
		// generate the Stop condition
		I2Cx->I2C_CR1 |= I2C_CR1_STOP ;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable the Stop condition generation
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP) ;
	}
}
 800071e:	e005      	b.n	800072c <I2C_Generate_Stop+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP) ;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <I2C_ACK_Control>:

void I2C_ACK_Control(I2C_TypeDef* I2Cx , fanctional_State_t ACK_state)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	if(ACK_state != Disable)
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <I2C_ACK_Control+0x20>
	{
		// Enable ACK Control
		I2Cx->I2C_CR1 |= I2C_CR1_ACK ;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable  ACK Control
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK) ;
	}
}
 8000754:	e005      	b.n	8000762 <I2C_ACK_Control+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK) ;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <I2C_Get_Flag_Status>:
Flag_Status_t I2C_Get_Flag_Status(I2C_TypeDef* I2Cx  , Status_flag_t flag)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	Flag_Status_t status = Reset ;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]


	if(flag < I2C_Flag_MSL )
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000780:	d20a      	bcs.n	8000798 <I2C_Get_Flag_Status+0x2c>
	{
		status = ((I2Cx->I2C_SR1)&(flag))? Set : Reset ;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	4013      	ands	r3, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e00a      	b.n	80007ae <I2C_Get_Flag_Status+0x42>
	}
	else
	{
		status = ((I2Cx->I2C_SR2)&(flag>>15))? Set : Reset ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	699a      	ldr	r2, [r3, #24]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	0bdb      	lsrs	r3, r3, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	73fb      	strb	r3, [r7, #15]
//	if(flag == I2C_Flag_ADDR)
//	{
//		uint32_t dummy_read ;
//		dummy_read = I2Cx->I2C_SR2 ;
//	}
	return status ;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <I2C_Get_Event_Status>:
Flag_Status_t I2C_Get_Event_Status(I2C_TypeDef* I2Cx , Event_type_t Event)
{
 80007ba:	b590      	push	{r4, r7, lr}
 80007bc:	b085      	sub	sp, #20
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]
	Flag_Status_t Event_Status ;
	switch(Event)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d124      	bne.n	8000816 <I2C_Get_Event_Status+0x5c>
	{
	case I2C_Event_Master_Byte_Transmitting :
		/* Check Event that Master transmite byte
		 * TRA , MSL , BUSY , TXE
		 */
		Event_Status = ((I2C_Get_Flag_Status(I2Cx, I2C_Flag_TRA)) & (I2C_Get_Flag_Status(I2Cx, I2C_Flag_TxE)) & (I2C_Get_Flag_Status(I2Cx, I2C_Flag_Busy)) & I2C_Get_Flag_Status(I2Cx, I2C_Flag_MSL))? Set : Reset;
 80007cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ffcb 	bl	800076c <I2C_Get_Flag_Status>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461c      	mov	r4, r3
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffc5 	bl	800076c <I2C_Get_Flag_Status>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4023      	ands	r3, r4
 80007e6:	b2dc      	uxtb	r4, r3
 80007e8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ffbd 	bl	800076c <I2C_Get_Flag_Status>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4023      	ands	r3, r4
 80007f6:	b2dc      	uxtb	r4, r3
 80007f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffb5 	bl	800076c <I2C_Get_Flag_Status>
 8000802:	4603      	mov	r3, r0
 8000804:	4023      	ands	r3, r4
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	73fb      	strb	r3, [r7, #15]
		break;
 8000814:	bf00      	nop
	}
	return Event_Status ;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}

08000820 <I2C_Send_Address>:
// Support 7Bit_address only
void I2C_Send_Address(I2C_TypeDef* I2Cx , uint16_t address ,I2C_Direction_t Direction_mode)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	807b      	strh	r3, [r7, #2]
 800082c:	4613      	mov	r3, r2
 800082e:	707b      	strb	r3, [r7, #1]
	// shift address by 1 to leave LSB for Direction
	address = (address<<1);
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	807b      	strh	r3, [r7, #2]
//	slave address sent.
//	In 7-bit addressing mode,
//	– To enter Transmitter mode, a master sends the slave address with LSB reset.
//	– To enter Receiver mode, a master sends the slave address with LSB set.

	if(Direction_mode == I2C_Transmitter_mode)
 8000836:	787b      	ldrb	r3, [r7, #1]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d104      	bne.n	8000846 <I2C_Send_Address+0x26>
	{
		/* Reset LSB to enter Transmitter mode */
		address &= ~(1<<0);
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	807b      	strh	r3, [r7, #2]
 8000844:	e003      	b.n	800084e <I2C_Send_Address+0x2e>
	}
	else
	{
		/* Set LSB to enter Receiver mode */
		address |= (1<<0);
 8000846:	887b      	ldrh	r3, [r7, #2]
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	807b      	strh	r3, [r7, #2]
	}

	/* Write address in DR register */
	I2Cx->I2C_DR = address;
 800084e:	887a      	ldrh	r2, [r7, #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	611a      	str	r2, [r3, #16]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <I2C1_EV_IRQHandler>:

/*************************
 *	 ISR
 *************************/
void I2C1_EV_IRQHandler (void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	uint32_t dummy_Read ;

	if(G_I2C_Cfg[I2C1_index].Device_mode == slave)
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <I2C1_EV_IRQHandler+0xa8>)
 8000868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d147      	bne.n	8000900 <I2C1_EV_IRQHandler+0xa0>
	{
		/* handle interrupt generated by Stop Event*/
		if(I2C_Get_Flag_Status(I2C1, I2C_Flag_STOPF))
 8000870:	2110      	movs	r1, #16
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 8000874:	f7ff ff7a 	bl	800076c <I2C_Get_Flag_Status>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d009      	beq.n	8000892 <I2C1_EV_IRQHandler+0x32>
		{
			/* ADDR=1, cleared by reading SR1 register followed by reading SR2*/
			dummy_Read = I2C1->I2C_SR1 ;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	607b      	str	r3, [r7, #4]
			dummy_Read = I2C1->I2C_SR2 ;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	607b      	str	r3, [r7, #4]
			G_I2C_Cfg[I2C1_index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <I2C1_EV_IRQHandler+0xa8>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	2002      	movs	r0, #2
 8000890:	4798      	blx	r3
		}

		/* handle interrupt generated by Address matched Event*/
		if(I2C_Get_Flag_Status(I2C1, I2C_Flag_ADDR))
 8000892:	2102      	movs	r1, #2
 8000894:	481d      	ldr	r0, [pc, #116]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 8000896:	f7ff ff69 	bl	800076c <I2C_Get_Flag_Status>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d009      	beq.n	80008b4 <I2C1_EV_IRQHandler+0x54>
		{
			/* (STOPF == 1) {READ SR1; WRITE CR1} */
			dummy_Read = I2C1->I2C_SR1 ;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	607b      	str	r3, [r7, #4]
			I2C1->I2C_CR1 = 0x0000 ;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
			G_I2C_Cfg[I2C1_index].P_Slave_Event_CallBack(I2C_EV_STOP);
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <I2C1_EV_IRQHandler+0xa8>)
 80008ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b0:	2000      	movs	r0, #0
 80008b2:	4798      	blx	r3
		}

		/* handle interrupt generated by TXE Event*/
		if(I2C_Get_Flag_Status(I2C1, I2C_Flag_TxE))
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008b8:	f7ff ff58 	bl	800076c <I2C_Get_Flag_Status>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00b      	beq.n	80008da <I2C1_EV_IRQHandler+0x7a>
		{
			// The APP should use (MCAL_I2C_Slave_Tx) to send data
			if(I2C_Get_Flag_Status(I2C1, I2C_Flag_TRA))
 80008c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008c8:	f7ff ff50 	bl	800076c <I2C_Get_Flag_Status>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <I2C1_EV_IRQHandler+0x7a>
			G_I2C_Cfg[I2C1_index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <I2C1_EV_IRQHandler+0xa8>)
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	2003      	movs	r0, #3
 80008d8:	4798      	blx	r3
		}

		/* handle interrupt generated by RXNE Event*/
		if(I2C_Get_Flag_Status(I2C1, I2C_Flag_RxNE))
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008de:	f7ff ff45 	bl	800076c <I2C_Get_Flag_Status>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00b      	beq.n	8000900 <I2C1_EV_IRQHandler+0xa0>
		{
			// The APP should use (MCAL_I2C_Slave_Rx) to Recieve data
			if(!I2C_Get_Flag_Status(I2C1, I2C_Flag_TRA))
 80008e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <I2C1_EV_IRQHandler+0xac>)
 80008ee:	f7ff ff3d 	bl	800076c <I2C_Get_Flag_Status>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <I2C1_EV_IRQHandler+0xa0>
			G_I2C_Cfg[I2C1_index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <I2C1_EV_IRQHandler+0xa8>)
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	2004      	movs	r0, #4
 80008fe:	4798      	blx	r3
	else
	{
		// the master mode not supported
	}

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000001c 	.word	0x2000001c
 800090c:	40005400 	.word	0x40005400

08000910 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	uint32_t dummy_Read ;

	if(G_I2C_Cfg[I2C2_index].Device_mode == slave)
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <I2C2_EV_IRQHandler+0xa8>)
 8000924:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000928:	2b01      	cmp	r3, #1
 800092a:	d147      	bne.n	80009bc <I2C2_EV_IRQHandler+0xa0>
	{
		/* handle interrupt generated by Stop Event*/
		if(I2C_Get_Flag_Status(I2C2, I2C_Flag_STOPF))
 800092c:	2110      	movs	r1, #16
 800092e:	4826      	ldr	r0, [pc, #152]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000930:	f7ff ff1c 	bl	800076c <I2C_Get_Flag_Status>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d009      	beq.n	800094e <I2C2_EV_IRQHandler+0x32>
		{
			/* ADDR=1, cleared by reading SR1 register followed by reading SR2*/
			dummy_Read = I2C2->I2C_SR1 ;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	607b      	str	r3, [r7, #4]
			dummy_Read = I2C2->I2C_SR2 ;
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	607b      	str	r3, [r7, #4]
			G_I2C_Cfg[I2C2_index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <I2C2_EV_IRQHandler+0xa8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	2002      	movs	r0, #2
 800094c:	4798      	blx	r3
		}

		/* handle interrupt generated by Address matched Event*/
		if(I2C_Get_Flag_Status(I2C2, I2C_Flag_ADDR))
 800094e:	2102      	movs	r1, #2
 8000950:	481d      	ldr	r0, [pc, #116]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000952:	f7ff ff0b 	bl	800076c <I2C_Get_Flag_Status>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <I2C2_EV_IRQHandler+0x54>
		{
			/* (STOPF == 1) {READ SR1; WRITE CR1} */
			dummy_Read = I2C2->I2C_SR1 ;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	607b      	str	r3, [r7, #4]
			I2C2->I2C_CR1 = 0x0000 ;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
			G_I2C_Cfg[I2C2_index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <I2C2_EV_IRQHandler+0xa8>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	2000      	movs	r0, #0
 800096e:	4798      	blx	r3
		}

		/* handle interrupt generated by TXE Event*/
		if(I2C_Get_Flag_Status(I2C2, I2C_Flag_TxE))
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000974:	f7ff fefa 	bl	800076c <I2C_Get_Flag_Status>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00b      	beq.n	8000996 <I2C2_EV_IRQHandler+0x7a>
		{
			// The APP should use (MCAL_I2C_Slave_Tx) to send data
			if(I2C_Get_Flag_Status(I2C2, I2C_Flag_TRA))
 800097e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 8000984:	f7ff fef2 	bl	800076c <I2C_Get_Flag_Status>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <I2C2_EV_IRQHandler+0x7a>
			G_I2C_Cfg[I2C2_index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <I2C2_EV_IRQHandler+0xa8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	2003      	movs	r0, #3
 8000994:	4798      	blx	r3
		}

		/* handle interrupt generated by RXNE Event*/
		if(I2C_Get_Flag_Status(I2C2, I2C_Flag_RxNE))
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 800099a:	f7ff fee7 	bl	800076c <I2C_Get_Flag_Status>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00b      	beq.n	80009bc <I2C2_EV_IRQHandler+0xa0>
		{
			// The APP should use (MCAL_I2C_Slave_Rx) to Recieve data
			if(!I2C_Get_Flag_Status(I2C2, I2C_Flag_TRA))
 80009a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <I2C2_EV_IRQHandler+0xac>)
 80009aa:	f7ff fedf 	bl	800076c <I2C_Get_Flag_Status>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d103      	bne.n	80009bc <I2C2_EV_IRQHandler+0xa0>
			G_I2C_Cfg[I2C2_index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <I2C2_EV_IRQHandler+0xa8>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	2004      	movs	r0, #4
 80009ba:	4798      	blx	r3
	else
	{
		// the master mode not supported
	}

}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000001c 	.word	0x2000001c
 80009c8:	40005800 	.word	0x40005800

080009cc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <EXTI0_IRQHandler>:

//-----------------------------
//ISR Functions
//-----------------------------
void EXTI0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<0);
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <EXTI0_IRQHandler+0x1c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <EXTI0_IRQHandler+0x1c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[0]();
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <EXTI0_IRQHandler+0x20>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4798      	blx	r3
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010400 	.word	0x40010400
 80009f8:	2000006c 	.word	0x2000006c

080009fc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<1);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <EXTI1_IRQHandler+0x1c>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <EXTI1_IRQHandler+0x1c>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]();
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <EXTI1_IRQHandler+0x20>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4798      	blx	r3
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	2000006c 	.word	0x2000006c

08000a20 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<2);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <EXTI2_IRQHandler+0x1c>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <EXTI2_IRQHandler+0x1c>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]();
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <EXTI2_IRQHandler+0x20>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4798      	blx	r3
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010400 	.word	0x40010400
 8000a40:	2000006c 	.word	0x2000006c

08000a44 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<3);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI3_IRQHandler+0x1c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <EXTI3_IRQHandler+0x1c>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]();
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <EXTI3_IRQHandler+0x20>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4798      	blx	r3
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010400 	.word	0x40010400
 8000a64:	2000006c 	.word	0x2000006c

08000a68 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<4);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <EXTI4_IRQHandler+0x1c>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <EXTI4_IRQHandler+0x1c>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[4]();
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <EXTI4_IRQHandler+0x20>)
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	2000006c 	.word	0x2000006c

08000a8c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <EXTI9_5_IRQHandler+0x24>
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6153      	str	r3, [r2, #20]
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <EXTI9_5_IRQHandler+0xac>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4798      	blx	r3
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
}
 8000aae:	e03e      	b.n	8000b2e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <EXTI9_5_IRQHandler+0x44>
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac6:	6153      	str	r3, [r2, #20]
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <EXTI9_5_IRQHandler+0xac>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4798      	blx	r3
}
 8000ace:	e02e      	b.n	8000b2e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <EXTI9_5_IRQHandler+0x64>
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae6:	6153      	str	r3, [r2, #20]
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <EXTI9_5_IRQHandler+0xac>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	4798      	blx	r3
}
 8000aee:	e01e      	b.n	8000b2e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <EXTI9_5_IRQHandler+0x84>
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6153      	str	r3, [r2, #20]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <EXTI9_5_IRQHandler+0xac>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4798      	blx	r3
}
 8000b0e:	e00e      	b.n	8000b2e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d008      	beq.n	8000b2e <EXTI9_5_IRQHandler+0xa2>
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <EXTI9_5_IRQHandler+0xa8>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6153      	str	r3, [r2, #20]
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI9_5_IRQHandler+0xac>)
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	4798      	blx	r3
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010400 	.word	0x40010400
 8000b38:	2000006c 	.word	0x2000006c

08000b3c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 8000b40:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <EXTI15_10_IRQHandler+0x24>
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6153      	str	r3, [r2, #20]
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	4798      	blx	r3
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
}
 8000b5e:	e04e      	b.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d009      	beq.n	8000b80 <EXTI15_10_IRQHandler+0x44>
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b76:	6153      	str	r3, [r2, #20]
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	4798      	blx	r3
}
 8000b7e:	e03e      	b.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <EXTI15_10_IRQHandler+0x64>
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b96:	6153      	str	r3, [r2, #20]
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4798      	blx	r3
}
 8000b9e:	e02e      	b.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d009      	beq.n	8000bc0 <EXTI15_10_IRQHandler+0x84>
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bb6:	6153      	str	r3, [r2, #20]
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bbc:	4798      	blx	r3
}
 8000bbe:	e01e      	b.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d009      	beq.n	8000be0 <EXTI15_10_IRQHandler+0xa4>
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6153      	str	r3, [r2, #20]
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bdc:	4798      	blx	r3
}
 8000bde:	e00e      	b.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <EXTI15_10_IRQHandler+0xc2>
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <EXTI15_10_IRQHandler+0xc8>)
 8000bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf6:	6153      	str	r3, [r2, #20]
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <EXTI15_10_IRQHandler+0xcc>)
 8000bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfc:	4798      	blx	r3
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010400 	.word	0x40010400
 8000c08:	2000006c 	.word	0x2000006c

08000c0c <MCAL_RCC_GET_SYSCLK_Freq>:
 * =======================================================================================
 * 									APIS
 * =======================================================================================
 */
uint32_t MCAL_RCC_GET_SYSCLK_Freq()
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable
*/
	switch(((RCC->CFGR)>>2)& 0b11)
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MCAL_RCC_GET_SYSCLK_Freq+0x30>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d006      	beq.n	8000c2c <MCAL_RCC_GET_SYSCLK_Freq+0x20>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d302      	bcc.n	8000c28 <MCAL_RCC_GET_SYSCLK_Freq+0x1c>
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d004      	beq.n	8000c30 <MCAL_RCC_GET_SYSCLK_Freq+0x24>
 8000c26:	e005      	b.n	8000c34 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MCAL_RCC_GET_SYSCLK_Freq+0x34>)
 8000c2a:	e003      	b.n	8000c34 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 1:

		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 8000c2e:	e001      	b.n	8000c34 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 2:

		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 8000c32:	e7ff      	b.n	8000c34 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	}
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	007a1200 	.word	0x007a1200
 8000c44:	00f42400 	.word	0x00f42400

08000c48 <MCAL_RCC_GET_PCLK1_Freq>:
uint32_t MCAL_RCC_GET_HCLK_Freq()
{
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> AHBPrescTable[(((RCC->CFGR)>>4)& 0xF)]);
}
uint32_t MCAL_RCC_GET_PCLK1_Freq()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>8)& 0b111)]);
 8000c4c:	f7ff ffde 	bl	8000c0c <MCAL_RCC_GET_SYSCLK_Freq>
 8000c50:	4601      	mov	r1, r0
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <MCAL_RCC_GET_PCLK1_Freq+0x20>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <MCAL_RCC_GET_PCLK1_Freq+0x24>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	08000f04 	.word	0x08000f04

08000c70 <TIM2_IRQHandler>:
 * =======================================================================================
 * 									ISR
 * =======================================================================================
 */
void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <TIM2_IRQHandler+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4798      	blx	r3
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000ac 	.word	0x200000ac

08000c84 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <TIM3_IRQHandler+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000ac 	.word	0x200000ac

08000c98 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <TIM4_IRQHandler+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4798      	blx	r3
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000ac 	.word	0x200000ac

08000cac <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister ;
	uint8_t PIN_Config = 0 ;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d801      	bhi.n	8000cc6 <MCAL_GPIO_Init+0x1a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	e001      	b.n	8000cca <MCAL_GPIO_Init+0x1e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8_t CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d804      	bhi.n	8000cde <MCAL_GPIO_Init+0x32>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	e005      	b.n	8000cea <MCAL_GPIO_Init+0x3e>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3338      	adds	r3, #56	; 0x38
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d912      	bls.n	8000d2e <MCAL_GPIO_Init+0x82>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d00e      	beq.n	8000d2e <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	3b04      	subs	r3, #4
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	789b      	ldrb	r3, [r3, #2]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	75fb      	strb	r3, [r7, #23]
 8000d2c:	e032      	b.n	8000d94 <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	785b      	ldrb	r3, [r3, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <MCAL_GPIO_Init+0x92>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d107      	bne.n	8000d4e <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	75fb      	strb	r3, [r7, #23]
 8000d4c:	e022      	b.n	8000d94 <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d102      	bne.n	8000d5c <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 8000d56:	2304      	movs	r3, #4
 8000d58:	75fb      	strb	r3, [r7, #23]
 8000d5a:	e01b      	b.n	8000d94 <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d10a      	bne.n	8000d7e <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	4611      	mov	r1, r2
 8000d72:	2201      	movs	r2, #1
 8000d74:	408a      	lsls	r2, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	e00a      	b.n	8000d94 <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	4611      	mov	r1, r2
 8000d88:	2201      	movs	r2, #1
 8000d8a:	408a      	lsls	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	7df9      	ldrb	r1, [r7, #23]
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	431a      	orrs	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Clock_init>:
#include "Stm32_F103X6.h"
#include "Stm32F103C8_I2C_Driver.h"
#include "I2C_Slave_EEPROM.h"

void Clock_init()
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <Clock_init+0x18>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <Clock_init+0x18>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6193      	str	r3, [r2, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <main>:
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	Clock_init();
 8000dd2:	f7ff ffed 	bl	8000db0 <Clock_init>

	// Test Case 1
	uint8_t ch1[] = { 0x1, 0x2 ,0x3,0x4,0x5,0x6,0x7};
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <main+0x78>)
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de0:	6018      	str	r0, [r3, #0]
 8000de2:	3304      	adds	r3, #4
 8000de4:	8019      	strh	r1, [r3, #0]
 8000de6:	3302      	adds	r3, #2
 8000de8:	0c0a      	lsrs	r2, r1, #16
 8000dea:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8000df6:	f7ff f9bb 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_Nbytes(0xAF, ch1, 7);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2207      	movs	r2, #7
 8000e00:	4619      	mov	r1, r3
 8000e02:	20af      	movs	r0, #175	; 0xaf
 8000e04:	f7ff f9d8 	bl	80001b8 <EEPROM_Write_Nbytes>
	EEPROM_Read_bytes(0xAF, ch2, 7);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	20af      	movs	r0, #175	; 0xaf
 8000e10:	f7ff fa1e 	bl	8000250 <EEPROM_Read_bytes>

	// Test case 2
	ch1[0] = 0xA ;
 8000e14:	230a      	movs	r3, #10
 8000e16:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB ;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC ;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD ;
 8000e20:	230d      	movs	r3, #13
 8000e22:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_Nbytes(0xFFF, ch1, 4);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	2204      	movs	r2, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e30:	f7ff f9c2 	bl	80001b8 <EEPROM_Write_Nbytes>
	EEPROM_Read_bytes(0xFFF, ch2, 4);
 8000e34:	463b      	mov	r3, r7
 8000e36:	2204      	movs	r2, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e3e:	f7ff fa07 	bl	8000250 <EEPROM_Read_bytes>

    /* Loop forever */
	for(;;);
 8000e42:	e7fe      	b.n	8000e42 <main+0x76>
 8000e44:	08000efc 	.word	0x08000efc

08000e48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e4a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e76:	f000 f811 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7a:	f7ff ffa7 	bl	8000dcc <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   r0, =_estack
 8000e80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e8c:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 8000e90:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e94:	200000bc 	.word	0x200000bc

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	4e0c      	ldr	r6, [pc, #48]	; (8000ed4 <__libc_init_array+0x38>)
 8000ea2:	4c0d      	ldr	r4, [pc, #52]	; (8000ed8 <__libc_init_array+0x3c>)
 8000ea4:	1ba4      	subs	r4, r4, r6
 8000ea6:	10a4      	asrs	r4, r4, #2
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	d109      	bne.n	8000ec0 <__libc_init_array+0x24>
 8000eac:	f000 f81a 	bl	8000ee4 <_init>
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	4e0a      	ldr	r6, [pc, #40]	; (8000edc <__libc_init_array+0x40>)
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ee0 <__libc_init_array+0x44>)
 8000eb6:	1ba4      	subs	r4, r4, r6
 8000eb8:	10a4      	asrs	r4, r4, #2
 8000eba:	42a5      	cmp	r5, r4
 8000ebc:	d105      	bne.n	8000eca <__libc_init_array+0x2e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec4:	4798      	blx	r3
 8000ec6:	3501      	adds	r5, #1
 8000ec8:	e7ee      	b.n	8000ea8 <__libc_init_array+0xc>
 8000eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ece:	4798      	blx	r3
 8000ed0:	3501      	adds	r5, #1
 8000ed2:	e7f2      	b.n	8000eba <__libc_init_array+0x1e>
 8000ed4:	08000f0c 	.word	0x08000f0c
 8000ed8:	08000f0c 	.word	0x08000f0c
 8000edc:	08000f0c 	.word	0x08000f0c
 8000ee0:	08000f10 	.word	0x08000f10

08000ee4 <_init>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr

08000ef0 <_fini>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr
